

# This is a Chef recipe file. It can be used to specify resources which will
# apply configuration to a server.

log "Welcome to Chef, #{node["starter_name"]}!" do
  level :info
end

source_url="http://54.86.19.142:8081/artifactory/libs-release-local/com/testdata/hello-war/#{node[:version]}/hello-war-#{node[:version]}.war"

remote_file "/local_app/repo/hello-world.war" do
  source "#{source_url}"
  mode 0777
  action :create
end

# For more information, see the documentation: https://docs.chef.io/essentials_cookbook_recipes.html

========
version.json is : 

{ "version" : "1.1.0" , "run_list" : "starter"}

command to run is :
after copy the json file

knife ssh 'name:qanode1' 'sudo cp version.json ~/version.json'
knife ssh 'name qanode1' 'sudo chef-client -j version.json'


######### Sample recipe #####################
Cookbook Name:: mrpapp-2
# Recipe:: default
#


# Runs apt-get update
include_recipe "apt"

# Add the Open JDK apt repo
apt_repository 'openJDK' do
    uri 'ppa:openjdk-r/ppa'
    distribution 'trusty'
end

# Install JDK and JRE
apt_package 'openjdk-8-jdk' do
    action :install
end

apt_package 'openjdk-8-jre' do
    action :install
end

# Set Java environment variables
ENV['JAVA_HOME'] = "/usr/lib/jvm/java-8-openjdk-amd64"
ENV['PATH'] = "#{ENV['PATH']}:/usr/lib/jvm/java-8-openjdk-amd64/bin"

# Install MongoDB
apt_package 'mongodb' do
    action :install
end

# Install Tomcat 7
apt_package 'tomcat7' do
    action :install
end

# Load MongoDB data 
remote_file 'mongodb_data' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/deploy/MongoRecords.js'
    path './MongoRecords.js'
    action :create
    notifies :run, "script[mongodb_import]", :immediately
end

script 'mongodb_import' do
    interpreter "bash"
    action :nothing
    code "mongo ordering MongoRecords.js"
end

# Set tomcat port 
script 'tomcat_port' do 
    interpreter "bash"
    code "sed -i 's/Connector port=\".*\" protocol=\"HTTP\\/1.1\"$/Connector port=\"#{node['tomcat']['mrp_port']}\" protocol=\"HTTP\\/1.1\"/g' /etc/tomcat7/server.xml"
    not_if "grep 'Connector port=\"#{node['tomcat']['mrp_port']}\" protocol=\"HTTP/1.1\"$' /etc/tomcat7/server.xml"
    notifies :restart, "service[tomcat7]", :immediately
end

# Install the MRP app, restart the Tomcat service if necessary
remote_file 'mrp_app' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/builds/mrp.war'
    path '/var/lib/tomcat7/webapps/mrp.war'
    action :create
    notifies :restart, "service[tomcat7]", :immediately
end

# Ensure Tomcat is running
service 'tomcat7' do
    action :start
end

remote_file 'ordering_service' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/builds/ordering-service-0.1.0.jar'
    path './ordering-service-0.1.0.jar'
    action :create
    notifies :run, "script[stop_ordering_service]", :immediately
end

# Kill the ordering service
script 'stop_ordering_service' do
    interpreter "bash"
    # Only run when notifed
    action :nothing
    code "pkill -f ordering-service"
    only_if "pgrep -f ordering-service"
end

# Start the ordering service. 
script 'start_ordering_service' do
    interpreter "bash"
    code "/usr/lib/jvm/java-8-openjdk-amd64/bin/java -jar ordering-service-0.1.0.jar &"
    not_if "pgrep -f ordering-service"
end

